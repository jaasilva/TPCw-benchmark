************************************************************************
 *
 * This is part of the the Java TPC-W distribution,
 * written by Harold Cain, Tim Heil, Milo Martin, Eric Weglarz, and Todd
 * Bezenek.  University of Wisconsin - Madison, Computer Sciences
 * Dept. and Dept. of Electrical and Computer Engineering, as a part of
 * Prof. Mikko Lipasti's Fall 1999 ECE 902 course.
 *
 * Copyright (C) 1999, 2000 by Harold Cain, Timothy Heil, Milo Martin, 
 *                             Eric Weglarz, Todd Bezenek.
 *
 * This source code is distributed "as is" in the hope that it will be
 * useful.  It comes with no warranty, and no author or distributor
 * accepts any responsibility for the consequences of its use.
 *
 * Everyone is granted permission to copy, modify and redistribute
 * this code under the following conditions:
 *
 * This code is distributed for non-commercial use only.
 * Please contact the maintainer for restrictions applying to 
 * commercial use of these tools.
 *
 * Permission is granted to anyone to make or distribute copies
 * of this code, either as received or modified, in any
 * medium, provided that all copyright notices, permission and
 * nonwarranty notices are preserved, and that the distributor
 * grants the recipient permission for further redistribution as
 * permitted by this document.
 *
 * Permission is granted to distribute this code in compiled
 * or executable form under the same conditions that apply for
 * source code, provided that either:
 *
 * A. it is accompanied by the corresponding machine-readable
 *    source code,
 * B. it is accompanied by a written offer, with no time limit,
 *    to give anyone a machine-readable copy of the corresponding
 *    source code in return for reimbursement of the cost of
 *    distribution.  This written offer must permit verbatim
 *    duplication by anyone, or
 * C. it is distributed by someone who received only the
 *    executable form, and is accompanied by a copy of the
 *    written offer of source code that they received concurrently.
 *
 * In other words, you are welcome to use, share and improve this codes.
 * You are forbidden to forbid anyone else to use, share and improve what
 * you give them.
 *
 ************************************************************************
 *
 * Changed 2003 by Jan Kiefer.
 * Changed 2010 by Pedro Gomes
 *
 ************************************************************************/


@sql.getName=SELECT c_fname,c_lname FROM CUSTOMER WHERE c_id = ?

@sql.getBook=SELECT i_title, a_fname, a_lname, i_pub_date, i_publisher, i_subject, i_desc, i_image, i_cost, i_srp, i_avail, i_isbn, i_page, i_backing, i_dimension FROM ITEM,AUTHOR WHERE ITEM.i_a_id = AUTHOR.a_id AND i_id = ?

@sql.getCustomer=SELECT * FROM CUSTOMER, ADDRESS, COUNTRY WHERE CUSTOMER.c_addr_id = ADDRESS.addr_id AND ADDRESS.addr_co_id = COUNTRY.co_id AND CUSTOMER.c_uname = ?

@sql.getCustomer.login=SELECT C_ID , C_PASSWD , C_FNAME , C_LNAME  , C_PHONE , C_EMAIL , C_BIRTHDATE , C_DATA , C_DISCOUNT , ADDR_STREET1,ADDR_STREET2 , ADDR_CITY , ADDR_STATE , ADDR_ZIP FROM CUSTOMER,ADDRESS C WHERE C_ID = ? AND ADDR_ID  = C_ADDR_ID

@sql.doSubjectSearch=SELECT ITEM.i_title, AUTHOR.a_lname, AUTHOR.a_fname FROM ITEM, AUTHOR WHERE ITEM.i_a_id = AUTHOR.a_id AND ITEM.i_subject = ? ORDER BY ITEM.i_title limit 50

@sql.doTitleSearch=SELECT ITEM.i_title, AUTHOR.a_lname, AUTHOR.a_fname FROM ITEM, AUTHOR WHERE ITEM.i_a_id = AUTHOR.a_id AND ITEM.i_title= ? ORDER BY ITEM.i_title limit 50

@sql.doTitleTextSearch=SELECT ITEM.i_title, AUTHOR.a_lname , AUTHOR.a_fname FROM ITEM, AUTHOR WHERE ITEM.i_a_id = AUTHOR.a_id AND substring(soundex(ITEM.i_title),0,4)=substring(soundex(?),0,4) ORDER BY ITEM.i_title limit 50

@sql.doAuthorSearch=SELECT ITEM.i_title, AUTHOR.a_lname, AUTHOR.a_fname FROM AUTHOR, ITEM WHERE AUTHOR.a_lname = ? AND ITEM.i_a_id = AUTHOR.a_id ORDER BY ITEM.i_title limit 50

@sql.doAuthorTextSearch=SELECT ITEM.i_title, AUTHOR.a_lname, AUTHOR.a_fname FROM AUTHOR, ITEM WHERE substring(soundex(AUTHOR.a_lname),0,4)=substring(soundex(?),0,4) AND ITEM.i_a_id = AUTHOR.a_id ORDER BY ITEM.i_title limit 50


@sql.getNewProducts=SELECT i_id, i_title, a_fname, a_lname  
		 FROM ITEM, AUTHOR  
		 WHERE ITEM.i_a_id = AUTHOR.a_id  
		 AND ITEM.i_subject = ?  
		 ORDER BY ITEM.i_pub_date DESC,ITEM.i_title  
		 limit 50

@sql.getBestSellers=SELECT i_id, i_title, a_fname, a_lname  
		 FROM ITEM, AUTHOR, ORDER_LINE  
		 WHERE ITEM.i_id = ORDER_LINE.ol_i_id  
		 AND ITEM.i_a_id = AUTHOR.a_id  
		 AND ORDER_LINE.ol_o_id > (SELECT MAX(o_id)- ? FROM ORDERS)  
	     AND ITEM.i_subject = ?  
		 GROUP BY i_id, i_title, a_fname, a_lname  
		 ORDER BY SUM(ol_qty) DESC  
		 limit 50

@sql.getRelated=SELECT J.i_id,J.i_thumbnail from ITEM I, ITEM J where (I.i_related1 = J.i_id or I.i_related2 = J.i_id or I.i_related3 = J.i_id or I.i_related4 = J.i_id or I.i_related5 = J.i_id) and I.i_id = ?

@sql.adminUpdate=UPDATE ITEM SET i_cost = ?, i_image = ?, i_thumbnail = ?, i_pub_date = CURRENT_DATE WHERE i_id = ?
@sql.adminUpdate.related=SELECT ol_i_id  
		 FROM ORDERS, ORDER_LINE  
		 WHERE ORDERS.o_id = ORDER_LINE.ol_o_id  
		 AND NOT (ORDER_LINE.ol_i_id = ?)  
		 AND ORDERS.o_c_id IN (SELECT o_c_id  
 		                       FROM ORDERS, ORDER_LINE  
		                       WHERE ORDERS.o_id = ORDER_LINE.ol_o_id  
		                       AND ORDERS.o_id > (SELECT MAX(o_id)-10000 FROM ORDERS) 
		                       AND ORDER_LINE.ol_i_id = ?)  
		 GROUP BY ol_i_id  
		 ORDER BY SUM(ol_qty) DESC  
		 limit 5
@sql.adminUpdate.related1=UPDATE ITEM SET i_related1 = ?, i_related2 = ?, i_related3 = ?, i_related4 = ?, i_related5 = ? WHERE i_id = ?

@sql.getUserName=SELECT c_uname FROM CUSTOMER WHERE c_id = ?

@sql.getPassword=SELECT c_passwd FROM CUSTOMER WHERE c_uname = ?

@sql.getRelated1=SELECT i_related1 FROM ITEM where i_id = ?

@sql.getMostRecentOrder.id=SELECT o_id  
		     FROM CUSTOMER, ORDERS  
		     WHERE CUSTOMER.c_id = ORDERS.o_c_id  
		     AND CUSTOMER.c_id= ?  
		     ORDER BY o_date, ORDERS.o_id DESC  
		     limit 1
@sql.getMostRecentOrder.order=SELECT ORDERS.*, CUSTOMER.*,  
		       CC_XACTS.cx_type,  
		       ship.addr_street1 AS ship_addr_street1,  
		       ship.addr_street2 AS ship_addr_street2,  
		       ship.addr_state AS ship_addr_state,  
		       ship.addr_zip AS ship_addr_zip,  
		       ship_co.co_name AS ship_co_name,  
		       bill.addr_street1 AS bill_addr_street1,  
		       bill.addr_street2 AS bill_addr_street2,  
		       bill.addr_state AS bill_addr_state,  
		       bill.addr_zip AS bill_addr_zip,  
		       bill_co.co_name AS bill_co_name  
		     FROM CUSTOMER, ORDERS, CC_XACTS, 
		       ADDRESS AS ship,  
		       COUNTRY AS ship_co,  
		       ADDRESS AS bill,   
		       COUNTRY AS bill_co  
		     WHERE ORDERS.o_id = ?  
		       AND cx_o_id = ORDERS.o_id  
		       AND CUSTOMER.c_id = ORDERS.o_c_id  
		       AND ORDERS.o_bill_addr_id = bill.addr_id  
		       AND bill.addr_co_id = bill_co.co_id  
		       AND ORDERS.o_ship_addr_id = ship.addr_id  
		       AND ship.addr_co_id = ship_co.co_id  
		       AND ORDERS.o_c_id = CUSTOMER.c_id
		       
@sql.getMostRecentOrder.lines=SELECT *  
		     FROM ORDER_LINE, ITEM  
		     WHERE ol_o_id = ?  
		     AND ol_i_id = i_id

@sql.createEmptyCart.id=SELECT COUNT(*) FROM SHOPPING_CART
@sql.createEmptyCart=INSERT into SHOPPING_CART (sc_id, sc_time)  
		     VALUES (?,CURRENT_TIMESTAMP)

@sql.getItemInfo=SELECT I_COST ,I_SRP ,I_TITLE ,I_BACKING FROM ITEM WHERE I_ID = ?
@sql.addItem=SELECT scl_qty FROM SHOPPING_CART_LINE WHERE scl_sc_id = ? AND scl_i_id = ?
@sql.addItem.update=UPDATE SHOPPING_CART_LINE SET scl_qty = ? WHERE scl_sc_id = ? AND scl_i_id = ?
@sql.addItem.put=INSERT into SHOPPING_CART_LINE (scl_sc_id, scl_qty, scl_i_id ,scl_cost ,scl_srp ,scl_title,scl_backing) VALUES (?,?,?,?,?,?,?)

@sql.updateCartInfo=UPDATE SHOPPING_CART SET sc_sub_total =? , sc_tax =? ,sc_ship_cost =? , sc_total = ? WHERE sc_id = ?; 


@sql.refreshCart.remove=DELETE FROM SHOPPING_CART_LINE WHERE scl_sc_id = ? AND scl_i_id = ?
@sql.refreshCart.update=UPDATE SHOPPING_CART_LINE SET scl_qty = ? WHERE scl_sc_id = ? AND scl_i_id = ?

@sql.addRandomItemToCartIfNecessary=SELECT COUNT(*) from SHOPPING_CART_LINE where scl_sc_id = ?

@sql.resetCartTime=UPDATE SHOPPING_CART SET sc_time = CURRENT_TIMESTAMP WHERE sc_id = ?

@sql.getCart=SELECT SC_SUB_TOTAL,SC_TAX, SC_SHIP_COST,SC_TOTAL FROM SHOPPING_CART WHERE sc_id = ?

@sql.getCartLines= SELECT SCL_I_ID, SCL_QTY,SCL_COST FROM SHOPPING_CART_LINE WHERE scl_sc_id = ?

@sql.refreshSession=UPDATE CUSTOMER SET c_login = NOW(), c_expiration = (CURRENT_TIMESTAMP + INTERVAL 2 HOUR) WHERE c_id = ?

@sql.createNewCustomer=INSERT into CUSTOMER (c_id, c_uname, c_passwd, c_fname, c_lname, c_addr_id, c_phone, c_email, c_since, c_last_visit, c_login, c_expiration, c_discount, c_balance, c_ytd_pmt, c_birthdate, c_data) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
@sql.createNewCustomer.maxId=SELECT max(c_id) FROM CUSTOMER

@sql.getCInfo=SELECT c_fname, c_lname, c_addr_id ,c_discount  FROM CUSTOMER WHERE CUSTOMER.c_id = ?

@sql.getCAddrId=SELECT c_addr_id FROM CUSTOMER WHERE CUSTOMER.c_id = ?

@sql.getCAddr=SELECT c_addr_id FROM CUSTOMER WHERE CUSTOMER.c_id = ?

@sql.enterCCXact=INSERT into CC_XACTS (cx_o_id, cx_type, cx_num, cx_name, cx_expiry, cx_xact_amt, cx_xact_date, cx_co_id)  
		 VALUES (?, ?, ?, ?, ?, ?, CURRENT_DATE, (SELECT co_id FROM ADDRESS, COUNTRY WHERE addr_id = ? AND addr_co_id = co_id))

@sql.clearCart=DELETE FROM SHOPPING_CART_LINE WHERE scl_sc_id = ?

@sql.enterAddress.id=SELECT co_id FROM COUNTRY WHERE co_name = ?
@sql.enterAddress.match=SELECT addr_id FROM ADDRESS  
		 WHERE addr_street1 = ?  
		 AND addr_street2 = ?  
		 AND addr_city = ?  
		 AND addr_state = ?  
		 AND addr_zip = ?  
		 AND addr_co_id = ?
@sql.enterAddress.insert=INSERT into ADDRESS (addr_id, addr_street1, addr_street2, addr_city, addr_state, addr_zip, addr_co_id)  
		     VALUES (?, ?, ?, ?, ?, ?, ?)
@sql.enterAddress.maxId=SELECT max(addr_id) FROM ADDRESS

@sql.enterOrder.insert=INSERT into ORDERS (o_id, o_c_id, o_date, o_sub_total,  
		 o_tax, o_total, o_ship_type, o_ship_date,  
		 o_bill_addr_id, o_ship_addr_id, o_status)  
		 VALUES (?, ?, CURRENT_DATE, ?, ?, ?, ?, CURRENT_DATE + INTERVAL ? DAY, ?, ?, ?)
@sql.enterOrder.maxId=SELECT count(o_id) FROM ORDERS

@sql.addOrderLine=INSERT into ORDER_LINE (ol_id, ol_o_id, ol_i_id, ol_qty, ol_discount, ol_comments)  
		 VALUES (?, ?, ?, ?, ?, ?)

@sql.getStock=SELECT i_stock FROM ITEM WHERE i_id = ?

@sql.setStock=UPDATE ITEM SET i_stock = ? WHERE i_id = ?

@sql.verifyDBConsistency.custId=SELECT c_id FROM CUSTOMER
@sql.verifyDBConsistency.ITEMId=SELECT i_id FROM ITEM
@sql.verifyDBConsistency.addrId=SELECT addr_id FROM ADDRESS